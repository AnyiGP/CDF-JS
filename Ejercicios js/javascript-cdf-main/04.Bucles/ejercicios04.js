function cantidadDeVocales(phrase) {
  // Cuenta la cantidad de vocales en la frase pasada por parametros utilizando un bucle for
  // Tu c칩digo:游녢
  let contador = 0;
  for (let i = 0; i < phrase.length; i++) {
    let letra = phrase[i];
    if (
      letra === "a" ||
      letra === "e" ||
      letra === "i" ||
      letra === "o" ||
      letra === "u"
    ) {
      contador++;
    }
  }

  return contador;
}

function primerDivisible(divisor, dividendo) {
  // Encuentra el primer n칰mero divisible por 'num' a partir de un n칰mero dado utilizando un bucle while
  // Tu c칩digo:游녢
  // cual es el primerNumeroQueDivide a num iniciiando desde numeroInicial
  let numero = divisor
  while (dividendo % numero !== 0) {
    numero++;
   }
   return numero;
}

function encuentraX(x) {
  //Realiza un algoritmo que recorre numeros del 1 al 100, cuando pase por el numero X pasado por parametros
  // retornar "El numero X es: ..."
  // Tu C칩digo:游녢
  for (let i = 1; i <= 100; i++) {
    if (i === x) {
      return `El numero X es: ${i}`;
    }
  }
}

function sumandoTodo(num) {
  // Realiza un algoritmo que el cual recorra del 0 al numero pasado por parametros, debes retornar la suma de todo los numeros que se recorrio
  // Tu c칩digo:游녢
  let suma = 0;

  for (let i = 0; i <= num; i++) {
    suma += i;
  }
  return suma;
}

function BinarioADecimal(num) {
  // La funcion recibe por parametro, un numero binario pero en tipo de dato String
  // debes tomar este numero binario y ayudandote de un bucle pasarlo a binario
  // tu c칩digo:游녢
  // SE PUEDEN ESTABLECER 2 VARIABLES DENTRO DEL BUCLE FOR, POR UN LADO LA "I" PARA RECORRER EL NUMERO BINARIO DESDE LA ULTIMA POSICION, SE DEFINE LA VARIABLE "J" PARA LA POTENCIA SEGUN LA POSICION. Se activa siempre y cuando i sea >=0. Va a ir decreciendo en la posicion con i--. J++ en cada vuelta va a sumar la potencia al exponente 2. Se junta el ultimo con la potencia 0, el penultimo con la potencia 1... etc

  // let i = binario.length - 1 inicializa la variable i con el valor de binario.length - 1, que es la posici칩n del 칰ltimo d칤gito del n칰mero binario en el arreglo.
  // i >= 0 es la condici칩n de salida del bucle. Mientras i sea mayor o igual a cero, el bucle seguir치 ejecut치ndose.
  // i-- se ejecuta despu칠s de cada iteraci칩n del bucle y decrementa el valor de i en 1, lo que nos permite avanzar hacia el siguiente d칤gito del n칰mero binario en cada iteraci칩n.
  // Dentro del bucle, se accede al d칤gito binario correspondiente utilizando binario[i]. Luego, se convierte ese d칤gito en un n칰mero entero utilizando parseInt(binario[i]). Este n칰mero se multiplica por Math.pow(2, j), donde j representa la posici칩n relativa del d칤gito binario actual en el n칰mero binario.

  // A medida que el bucle itera, i se decrementa en 1 en cada iteraci칩n y j se incrementa en 1 en cada iteraci칩n. Esto permite que i y j se muevan de derecha a izquierda a medida que se recorren los d칤gitos del n칰mero binario.

  // Finalmente, el resultado de parseInt(binario[i]) * Math.pow(2, j) se suma a la variable decimal en cada iteraci칩n del bucle, lo que nos permite acumular el valor decimal del n칰mero binario a medida que se recorre.

  let decimal = 0;
  // num 1011
  ////////////va al ultimo //potencia// ult decrece // potencia se incrementa
  for (let i = num.length - 1, j = 0; i >= 0; i--, j++) {
    //pasa a num        //
    decimal += parseInt(num[i]) * Math.pow(2, j);
  }

  return decimal;
}

function Fibonacci(n) {
  // Realiza una secuencia Fibonacci con el indice pasado por paramentro
  // Se puede representar mediante la siguiente f칩rmula: F(n) = F(n-1) + F(n-2)
  // Tu c칩digo:游녢
  // cada n칰mero es la suma de los dos n칰meros anteriores.

  let secuencia = [0, 1]; // Inicializamos la secuencia con los primeros dos n칰meros: 0 y 1

  for (let i = 2; i <= n; i++) {
    const num = secuencia[i - 1] + secuencia[i - 2];
    secuencia.push(num);
  }

  return secuencia[n];
}

function esPrimo(numero) {
  //Escribe un programa que verifique si un n칰mero dado es primo o no.
  //Un n칰mero primo es aquel que solo es divisible por 1 y por s칤 mismo.
  //Si el numero pasado es primo devolve: numero " es primo." , caso contrario: numero " no es primo."
  // Tu c칩digo:游녢
  // excluimos 1
  if (numero === 1) {
    return numero + " no es primo.";
  }

  // Inicio a partir de 2, si numero es divisible por cualquier n칰mero entre 2 y la mitad del n칰mero
  for (let i = 2; i <= numero / 2; i++) {
    if (numero % i === 0) {
      return numero + " no es primo.";
    }
  }

  // Si el bucle no encontr칩 divisores, entonces el n칰mero es primo
  return numero + " es primo.";

}

function invertirCadena(cadena) {
  //La funci칩n toma una cadena de texto como par치metro, devuelve la cadena invertida.
  //Ejemplo: 'Hola' -> devolver 'aloH'
  //Tu codigo:游녢
  const cadenaInvertida = cadena.split('').reverse().join('');
  return cadenaInvertida;
}

module.exports = {
  cantidadDeVocales,
  encuentraX,
  sumandoTodo,
  BinarioADecimal,
  Fibonacci,
  esPrimo,
  invertirCadena,
  primerDivisible,
};
